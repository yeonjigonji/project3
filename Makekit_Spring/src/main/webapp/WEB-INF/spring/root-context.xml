<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- log4jdbc를 이용하는 경우 아래의 JDBC 드라이버와 URL 정보 수정해 줍니다 -->
		<property name="driverClassName"
			value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl"
			value="jdbc:log4jdbc:oracle:thin:@localhost:1521:orcl"></property>		
		
		<!-- 아래는 log4jdbc를 이용하지 않은 경우 JDBC 드라이버와 URL 정보 설정 내용입니다. -->
		<!--  
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="jdbcUrl"
			value="jdbc:oracle:thin:@localhost:1521:orcl"></property>
		 -->		
			
		<property name="username" value="f_project"></property>
		<property name="password" value="f_project"></property>
	</bean>
	
	<!-- HikariCP configuration -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
	<constructor-arg ref="hikariConfig" />
	</bean>
	
	<!-- 스프링에서 SqlSessionFactory를 등록하는 작업은
	     SqlSessionFactoryBean을 이용합니다. -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Page 469 bean 태그로 id transactionManager 태그 추가 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	
	<!-- Page 469 tx annotation driven 태그 추가 -->
	<tx:annotation-driven/>	
	
	<mybatis-spring:scan base-package="org.zerock.mapper"/>	
	
	<context:component-scan base-package="org.zerock.sample">
	</context:component-scan>
	
	<context:component-scan base-package="org.zerock.service"></context:component-scan>		
		
	<!-- Page 455 root-context xml 파일에 다음의 소스를 추가해 줍니다. (시작) -->
	<context:annotation-config></context:annotation-config>
	<!-- 아래의 component-scan 태그에 의해서 LogAdvice가 스프링의 빈(객체)로 등록됨 -->
	<context:component-scan base-package="org.zerock.aop"></context:component-scan>
	<!-- aop:aspectj-autoproxy 태그를 이용해서 LogAdvice에 설정한
	     @Before가 동작하게 됩니다. -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- Page 455 root-context xml 파일에 다음의 소스를 추가해 줍니다. (끝) -->
		
	<!-- Page596 root-context xml 파일에 task annotation-driven 태그 추가 -->
	<task:annotation-driven/>
	
	<!-- Page598 FileCheckTask가 정상적으로 동작하는지 확인하기 위해
	         root-context xml FileCheckTask를 스프링의 빈으로 설정합니다. -->
	<context:component-scan base-package="org.zerock.task"></context:component-scan>
		
</beans>







