<?xml version="1.0" encoding="UTF-8"?>
<!-- Page610 아래는 스프링 시큐리티 네임스페이스 수정 적용했음 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Page630 CustomAccessDeniedHandler 클래스 bean 등록 추가 -->
	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
	
	<!-- Page711 소스 코딩할 때 아래 1줄 소스는 주석 처리해 줌 -->
	<!-- Page639 CustomLoginSuccessHandler 클래스 bean 등록 추가 -->
	<!-- 
	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>
	 -->
	 
	
	
	<!-- Page652 소스 코딩할 때 아래 1줄 소스는 주석 처리해 줌 -->
	<!-- Page649 CustomNoOpPasswordEncoder 클래스 bean 등록 추가 -->
	<!-- 
	<bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean>
 	-->
 	
 	<!-- Page652 아래 1줄 소스 코딩 추가 -->
 	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- Page667 아래 1줄 소스 코딩 추가 -->
	<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>

	<security:http>	
    	<!-- Page618 secrity:intercept-url 태그 코딩  -->
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		<!-- /sample/member 라는 URI는 ROLE_MEMBER라는 권한이 있는 사용자만이 접근할 수 있게 합니다. -->
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		
		<!-- Page624 admin 권한자 추가 -->
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
	
		<!-- 스프링 시큐리티에서 기본적으로 로그인 페이지를 제공하게 합니다. -->
		<!-- Page631 코딩할 때, 아래 1줄 소스 주석 처리 -->
		<!-- 
		<security:form-login/>
		 -->
		 <!-- Page631 아래 1줄 소스 코딩 : 커스텀 로그인 페이지 설정 -->
		 <!-- login-page 속성의 URI는 반드시 GET 방식으로 접근하는 URI를 지정합니다.-->
		 <!-- Page639 소스 코딩할 때 아래 1줄 소스 주석 처리 -->
		 <!-- 
		 <security:form-login login-page="/customLogin"/>
		  -->
		  
		<!-- Page711 소스 코딩할 때 아래 1줄 소스 코딩 추가해 줌 -->
	 	<security:form-login login-page="/customLogin"/>
		
		<!-- Page626 acceess denied handler 추가 코딩
		     /accessError라는 URI로 접근 제한 시 보이는 화면을 처리합니다. -->
		<!-- Page630 소스 코딩할 때 아래 1줄 소스는 주석 처리함 -->
		<!-- 
		<security:access-denied-handler error-page="/accessError"/>
		 -->
		 <!-- Page630 소스 코딩 : 아래 1줄 소스 추가 -->
		 <!-- security access denied handler는 error-page 속성과 ref 속성
		   둘 중 하나만을 사용합니다. 위에 error-page 속성과 달리 ref 속성으로
		   customAccessDenied에서 /accessError 로 리다이렉트 처리되는 것을
		      확인해 봅니다. -->
		 <security:access-denied-handler ref="customAccessDenied"/>
		 
		 <!-- Page639 아래 한줄 소스 코딩 추가 -->
		 <security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess"/>
		 
		 <!-- Page637 일반적으로 CSRF 토큰은 세션을 통해서 보관하고, 브라우저에서
		      전송된 CSRF 토큰값을 검사하는 방식으로 처리합니다. 스프링 시큐리티에서는
		   CSRF 토큰 생성을 비활성화하거나 CSRF 토큰을 쿠키를 이용해서 처리하는 등의
		      설정을 지원합니다. -->
		 <!-- 
		 <security:csrf disabled="true"/>
		  -->
		  
		  <!-- Page640 로그아웃 처리와 LogoutSuccessHandler 활용 : 아래 1줄 소스 코딩  -->
		  <!-- Page681 소스 코딩할 때 아래 1줄 소스는 주석 처리해 줍니다. -->
		  <!-- 
		  <security:logout logout-url="/customLogout" invalidate-session="true"/>
		   -->
			
		  <!-- Page678 security remember-me 속성 추가 -->
		  <security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
		  
		  <!-- Page681 로그아웃할 때 쿠키 삭제 : 자동 로그인 기능을 이용하는 경우에
		   사용자가 로그아웃 하면 기존과 달리 자동 로그인에 사용하는 쿠키도 삭제해 주도록
		   쿠키를 삭제하는 항목을 security context xml 파일에 설정해 줍니다.
		   별도의 설정이 없었다면 자동 로그인에서 사용하는 쿠키의 이름은 remember-me 입니다.
		  Tomcat WAS를 통해서 실행되고 있다면 WAS가 발행하는 쿠키의 이름은
		  JSESSION_ID 입니다. Tomcat 등이 발행하는 쿠키는 굳이 지정할 필요가 없지만
		    관련된 모든 쿠키를 같이 삭제해 주는 것이 좋습니다. -->
		  <security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me, JSESSIONID"/>
			
	</security:http>

	<security:authentication-manager>	
	
	<!-- Page621 security authentication-provider 태그 추가 -->
	<!-- Page667 아래 1줄 소스 수정 코딩 해줌 : user-service-ref 속성과 값을 추가해 줌 -->
	<security:authentication-provider user-service-ref="customUserDetailsService">
	
	    <!-- Page646 dataSource 추가 : 앞서 root-context xml에
	         dataSource 빈(Bean)이 등록되어 있는지도 확인하고 진행 바랍니다.  -->
	    
	    <!-- Page657 소스 코딩 확인할 때 아래 1줄 소스는 주석처리 해줌  -->
	    <!-- 
		<security:jdbc-user-service data-source-ref="dataSource"/>
		-->
		
		<!-- Page657 아래 1줄 security:jdbc-user-service 소스 코딩 추가 -->
		<!-- Page667 user-service-ref 속성 적용할 때 아래 태그 소스는 주석 처리함 -->
		<!-- 
		 <security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select userid , userpw 
		, enabled from tbl_member where userid = ? " authorities-by-username-query="select 
		userid, auth from tbl_member_auth where userid = ? " />
		-->
		
		<!-- Page652 소스 코딩할 때 아래 password-encoder 1줄 소스는 주석 처리함 -->
		<!-- Page649 security password encoder 아래 1줄 소스 추가 코딩 -->
		<!-- 
		<security:password-encoder ref="customPasswordEncoder"/>
		 -->
	
		<security:password-encoder ref="bcryptPasswordEncoder"/>
	
		<!-- Page646 연습할 때 아래 security user-service 태그 주석 처리함 -->
		<!-- 
		<security:user-service>
		 -->
			<!-- 스프링 시큐리티 5버전부터 반드시 PasswordEncoder를 사용하도록
		     변경되었습니다. 스프링 시큐리티 4버전까지는 PasswordEncoder의 지정이
		     없어도 동작했지만, 5버전부터는 PasswordEncoder의 지정이 반드시 필요합니다. -->			
			<!-- Page622 패스워드 인코딩 처리 없이 사용하고 싶다면 패스워드 앞에
			     noop 문자열을 추가합니다.  -->			     
			<!-- Page646 연습할 때 아래 security user-service 태그 주석 처리함 -->
			<!--  
			<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
			 -->
			
			<!-- Page624 admin 권한자 추가 -->
			<!-- security user 태그에 추가된 admin 사용자는 'ROLE_MEMBER'와
		     'ROLE_ADMIN'이라는 2개의 권한을 갖도록 설정합니다. Admin 계정을 가진
		           사용자는 /sample/member와 /sample/admin 모두에 접근할 수 있습니다.  -->
		    <!-- Page646 연습할 때 아래 security user-service 태그 주석 처리함 -->
		    <!-- 
			<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
		</security:user-service>
		 -->
		
		 
	</security:authentication-provider>
	
	</security:authentication-manager>

</beans>
