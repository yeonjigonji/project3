<?xml version="1.0" encoding="UTF-8"?>
<!-- Page490 web xml 파일을 이용하는 경우의 첨부파일 설정 -->
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	id="WebApp_ID" version="3.1">

	<!-- The definition of the Root Spring Container shared by all Servlets 
      and Filters -->
   <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/spring/root-context.xml
    /WEB-INF/spring/security-context.xml
    </param-value>
   </context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		
		<!-- Page491 web xml 파일의 servlet 태그 내에 multipart-config 태그 추가 -->
		<!-- multipart-config 설정은 특정 사이즈의 메모리 사용 file-size-threshold, 업로드되는 파일을 저장할 공간 지정 location, 업로드되는 파일의 최대 크기 설정 max-file-size와 한번에 올릴 수 있는 최대 크기 max-request-size를 설정할 수 있습니다. web xml 파일의 설정은 WAS Tomcat 자체의 설정일 뿐이고, 스프링에서 업로드 처리는
		MultipartResolver라는 타입의 객체를 빈으로 등록해야만 가능합니다. Web과 관련된
		설정이므로 servlet-context xml 파일을 이용해서 설정합니다. -->
		<multipart-config>		
			<location>C:\\upload\\temp</location>
			<max-file-size>20971520</max-file-size> <!--1MB * 20 -->
			<max-request-size>41943040</max-request-size><!-- 40MB -->
			<file-size-threshold>20971520</file-size-threshold> <!-- 20MB -->
		</multipart-config>		
	</servlet>			
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 새로운 게시물 등록할 때 브라우저에서 한글이 깨져서 전송되는 문제를 해결하기 위한
	     UTF-8 필터 처리  -->
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>encoding</filter-name>
		<servlet-name>appServlet</servlet-name>
	</filter-mapping>
	
	<!-- Page715 아래 filter 태그, filter-mapping 태그 추가 바랍니다.
	          스프링 시큐리티 한글 처리를 위하여, 인코딩 설정을 먼저 적용하고,
	          스프링 시큐리티를 적용해 주는 순서는 주의해서 설정해 줍니다. -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping> 	
	
	<!-- Page610 스프링 시큐리티가 스프링 MVC에서 사용되기 위해서는 필터를 이용해서
	     스프링 동작에 관여하도록 아래와 같이 filter 태그를 적용해서 설정해 줍니다. -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>   
	

</web-app>
